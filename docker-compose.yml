version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-inventory}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - inventory_network

  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    command: >
      sh -c 'if [ -z "$${REDIS_PASSWORD}" ]; then
        redis-server --appendonly yes
      else
        redis-server --appendonly yes --requirepass "$${REDIS_PASSWORD}"
      fi'
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - inventory_network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_api
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-inventory}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-eu-north-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-aiventory-bucket}

      # App settings
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      API_V1_STR: ${API_V1_STR:-/api/v1}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-10080}

      # Email settings
      SMTP_TLS: ${SMTP_TLS:-True}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL}
      EMAILS_FROM_NAME: ${EMAILS_FROM_NAME:-AIventory System}
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Celery воркер
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_worker
    environment:
      # Копируем все переменные из api сервиса
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-inventory}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}

      # Email settings для уведомлений
      SMTP_TLS: ${SMTP_TLS:-True}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL}
      EMAILS_FROM_NAME: ${EMAILS_FROM_NAME:-AIventory System}
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=${CELERY_CONCURRENCY:-2}
    restart: unless-stopped

  # Celery beat scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_beat
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-inventory}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    command: celery -A app.tasks.celery_app beat --loglevel=info
    restart: unless-stopped

  # Flower для мониторинга Celery (опционально)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_flower
    environment:
      CELERY_BROKER_URL: redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379/0
      CELERY_RESULT_BACKEND: redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}redis:6379/0
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - inventory_network
    command: celery -A app.tasks.celery_app flower --port=5555
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  inventory_network:
    driver: bridge