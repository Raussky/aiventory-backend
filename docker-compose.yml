version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-inventory_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-inventory_password}
      POSTGRES_DB: ${POSTGRES_DB:-inventory_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inventory_user}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis для кеширования и очередей
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Основное приложение FastAPI
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_app
    env_file:
      - .env
    environment:
      # Переопределение для Docker
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Для локальной разработки
      RAILWAY_ENVIRONMENT: ${RAILWAY_ENVIRONMENT:-development}
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker для фоновых задач
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped

  # Celery Beat для периодических задач
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    restart: unless-stopped

  # Flower для мониторинга Celery (опционально)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_flower
    command: celery -A app.tasks.celery_app flower --port=5555
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped

  # Nginx для production (опционально)
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: inventory_network