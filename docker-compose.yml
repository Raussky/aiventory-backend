version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    command: >
      sh -c 'if [ -z "$${REDIS_PASSWORD}" ]; then
        redis-server --appendonly yes
      else
        redis-server --appendonly yes --requirepass "$${REDIS_PASSWORD}"
      fi'
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: >
        sh -c 'if [ -z "$${REDIS_PASSWORD}" ]; then
          redis-cli --raw ping
        else
          redis-cli --raw -a "$${REDIS_PASSWORD}" ping
        fi'
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_api
    environment:
      # Database
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_SERVER:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-inventory}}

      # Redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-eu-north-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-aiventory-bucket}

      # App settings
      SECRET_KEY: ${SECRET_KEY}
      API_V1_STR: ${API_V1_STR:-/api/v1}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-10080}
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_worker
    environment:
      # Копируем все переменные из api сервиса
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_SERVER:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-inventory}}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-eu-north-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-aiventory-bucket}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=${CELERY_CONCURRENCY:-2}

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_beat
    environment:
      # Копируем все переменные из api сервиса
      POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-inventory}
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_SERVER:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-inventory}}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app beat --loglevel=info

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_flower
    environment:
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app flower --port=5555 ${FLOWER_BASIC_AUTH:+--basic_auth=${FLOWER_BASIC_AUTH}}

  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - api

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: inventory_network